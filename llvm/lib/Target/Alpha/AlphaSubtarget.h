//=====-- AlphaSubtarget.h - Define Subtarget for the Alpha --*- C++ -*--====//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Alpha specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef ALPHASUBTARGET_H
#define ALPHASUBTARGET_H

#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/MC/MCInstrItineraries.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "AlphaGenSubtargetInfo.inc"

#include "AlphaFrameLowering.h"
#include "AlphaInstrInfo.h"
#include "AlphaISelLowering.h"

namespace llvm {

class AlphaSubtarget : public AlphaGenSubtargetInfo {
  bool HasCT;
  InstrItineraryData InstrItins;
  AlphaFrameLowering FrameLowering;
  AlphaInstrInfo InstrInfo;
  AlphaTargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;

  AlphaSubtarget &initializeSubtargetDependencies(const std::string &CPU, const std::string &FS);

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  ///
  AlphaSubtarget(const Triple &TT, const std::string &CPU,
                 const std::string &FS, const TargetMachine &TM);
  
  /// ParseSubtargetFeatures - Parses features string setting specified 
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool hasCT() const { return HasCT; }

  const InstrItineraryData *getInstrItineraryData() const override {
    return &InstrItins;
  }
  const AlphaInstrInfo *getInstrInfo() const override {
    return &InstrInfo;
  }
  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const AlphaRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  const AlphaTargetLowering* getTargetLowering() const override {
    return &TLInfo;
  }
  const SelectionDAGTargetInfo* getSelectionDAGInfo() const override {
    return &TSInfo;
  }
};
} // End llvm namespace

#endif
